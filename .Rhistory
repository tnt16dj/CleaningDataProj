cacheSolve(uMatrix)
cacheSolve(uMatrix)
identical(uMatrix,uMatrix$get())
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
solveCache(uMatrix)
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(c(1,2,2,1),nrow=2,ncol=2)
uMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
uMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(1,3,3,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(1,3,3,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Todd <- makePerson()
Todd <- makePerson(Todd)
Todd $setAge(30)
Todd$getAge()
Todd$setAge(30)
Todd$getAge()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
Todd <- makePerson(Todd)
Todd <- makePerson("Todd")
Todd$setAge(30)
Todd$setHeight(5.5)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
todd <- makePerson("Todd")
todd$setAge(30)
todd$setHeight(5.5)
todd$getAGe
todd$getAge
todd$getAge()
todd$setAge()
todd$getHeight()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
makePerson("Todd")
makePerson$setAge(30)
todd <- makePerson("Todd Tkach")
todd$setAge(30)
todd$setHeight(5.5)
todd$whoAmI
todd$whoAmI()
todd$getAge()
todd$getHeight()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
library(datasets)
datasets
list(datasets)
library(datasets)
data(iris)
?iris
lapply(iris,mean)
help(apply)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
help(mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
help(split)
debug(ls)
ls
ls
ls
debug(ls)
ls
help(ls)
kj
ls
quit
quit
escape
exit
ls
mtcars
library(mtcars)
library(datasets)
data(mtcars)
help(ls)
ls
ls(mtcars)
debug(ls)
ls(mtcars)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
rm(list=ls(all=TRUE))
gc(reset=TRUE)
library(datasets)
data(mtcars)
head(mtcars)
help(subset)
fourCyl <- subset(mtcars, cyl == 4, select = hp)
four
fourCyl
mean(fourCyl)
mean(fourCyl[,1])
help(abs)
eightCyl <- subset(mtcars,cyl==8,select = hp)
abs(mean(fourCyl[,1])-mean(eightCyl[,1]))
library(datasets)
data(iris)
head(iris)
sapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
fourCyl <- subset(mtcars, cyl == 4, select = hp)
eightCyl <- subset(mtcars,cyl==8,select = hp)
abs(mean(fourCyl[,1])-mean(eightCyl[,1]))
help(runif)
library(datasets)
data(mtcars)
colSums(mtcars)
colMeans(mtcars)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
data.frame(1:10,2,2)
dataTest <- 1:20
not4 <- dataTest[!$]
not4 <- dataTest[!4]
not4
dataTest[not4]
not4 <- dataTest(dataTest[,1] != 4)
not4[-c(4)]
dataTest[not4]
dataTest[-c(4)]
not4 <- subset(dataTest, dataTest[,1] != 4)
dataTest[,]
typeof(dataTest)
str(dataTest)
not4 <- subset(dataTest, dataTest != 4)
dataTest[not4]
not468 <- subset(dataTest, dataTest != 4 & dataTest != 6 & dataTest != 8)
dataTest[not468]
library(swirl)
swirl()
1
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
C(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 +1000
my_div
1:20
pi:10
15:!
15:1
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2))
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
vect <- 1:5
repVect <- seq_along(vect)
repVect
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
past(my_char,collapse=" ")
paste(my_char,collapse=" ")
my_name <- c(my_char,"Todd")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0 ]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(matrix)
class(my_vectoro)
class(my_vector)
my_matrix <- my_vector
?matri
?matrix
my_matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(vector,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
install.packages("rJava")
library("xlsx")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "94f89735933597bb7082d52eec69739ca723756f")
myapp <- oauth_app("github", "75d31737db6c396d805b")
setwd("~/R_Docs/CleaningDataProject/CleaningDataProj")
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
?greg
?grep
features <- grep("mean|std", features)
features <- grep("mean|std", mergeData)
features
str(features)
rm(features)
str(mergeData)
tail(str(mergeData))
str(mergeData[,mergeData$Activity_ID])
str(mergeData[,563])
summary(mergeData[,563])
summary(mergeData[,562])
library(sqldf)
mergeData[,"ActivityID"]
mergeData[,"Activity_ID"]
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
subsetHeaders <- data.frame()
colnames[activityLabels]
activityLabels
colnames(activityLabels)
colnames(activityLabels[,2])
colnames(activityLabels[2])
source('~/.active-rstudio-document')
mergeData[,colnames(mergeData) like 'mean']
mergeData[,colnames(mergeData) like '%mean%']
mergeData[,colnames(mergeData) == '%mean%']
test <- colnames(mergeData) == '%mean%'
test
test <- colnames(mergeData) == "%mean%"
test
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
grep("mean|std",columnHeaders)
grep("mean",columnHeaders)
grep("mean",colnames(columnHeaders))
pplNames <- C("Todd","Elisa","Today")
subColHeaders <- colnames(columnHeaders) == "%mean%"
subColHeaders
subColHeaders <- colnames(columnHeaders) == "%act%"
subColHeaders
colnames(columnHeaders)
subColHeaders <- colnames(columnHeaders) == "%V%"
subColHeaders
mergeData["%mean%"]
mydf <- data.frame(1:12,4,3)
mydf
colnames(mydf) < c("test","bar","testing")
colnames(mydf) <- c("test","bar","testing")
mydf
mydf["test"]
colnames(mydf) like "test"
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", columnHeaders[, 2])
meanStdIndices
meanStdIndices <- grep("mean|std", columnHeaders[, 2])
meanStdIndices
length(meanStdIndices)
mergeData[,meanStdIndices]
str(mergeData[,meanStdIndices])
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
str(mergeData)
mergeData <- merge(mergeData,activityLabels,by="Activity_ID")
str(mergeData)
summary(mergeData[,"Activity"])
?summarise
?summarize
library(tidyr)
?summarize_each
?summarise
?summarize
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
library(dplyr)
?summarize_each
?summarise_each
str(mergeData)
tidyData <- summarise_each(group_by(mergeData,"Subject_ID","Activity"),funs(colMeans))
tidyData <- summarise_each(group_by(mergeData,mergeData$Subject_ID,mergeData$Activity),funs(colMeans))
mergeData[1,]
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
?group_by
group_by(mergeData,"Activity")
tidyData <- summarise_each(group_by(mergeData,Subject,Activity),funs(colMeans))
?summarise_each
tidyData <- summarise_each(group_by(mergeData,Subject,Activity),funs(colMeans),vars=-c("Subject","Activity"))
?summarise_each
mergeData <- group_by(mergeData,Subject,Activity)
mergeData
tidyData <- mergeData
str(tidyData)
mergeData %>% summarise_each(funs(colMeans))
?factor
summarize(mergeData)
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
summarize(mergeData)
str(mergeData)
head(mergeData)
?merge
library(dplyr)
mergeData <- tbl_df(mergeData)
str(mergeData)
summarize(mergeData)
summarize(mergeData,Activity=="LAYING")
summarize(mergeData,5)
mergeData <- group_by(mergeData,Subject,Activity)
head(mergeData)
tidyData <- select(mergeData,-c(Subject))
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
summarise_each(group_by(mergeData, Subject, Activity), funs(colMeans), vars=select(mergeData,-Subject:Activity))
write.table(mergeData,"merged_data.txt")
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
?gorup_by
library(dplyr)
y_subject_and_activity <- group_by(mergeData,Subject,Activity)
y_subject_and_activity
str(y_subject_and_activity)
table(y_subject_and_activity)
dim(y_subject_and_activity)
?factor
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
groupedData <- group_by(mergeData,Subject,Activity_ID)
dim(groupedData)
grouped_Data
colMeans(groupedData)
sapply
?sapply
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
str(mergeData)
library(mergeData)
library(dplyr)
groupData <- group_by(mergeData,Subject,Activity)
groupData
summarise_each(groupData,funs=colMeans)
summarise_each(group_by(mergeData, Subject, Activity), funs(colMeans), vars=select(mergeData,-Subject:Activity))
summarise_each(group_by(mergeData, Subject, Activity), funs(colMeans))
?summarise_each
summarise_each(group_by(mergeData, Subject, Activity), funs(mean))
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
str(tidyData)
tidyData[Subject == 1]
tidyData[tidyData$Subject == 1]
tidyData[tidyData$Subject == 1,]
tidyData <- select(tidyData,Subject,Activity,1:79)
str(tidyData)
head(tidyData)
source('~/.active-rstudio-document')
tidyData <- select(tidyData,-Activity_ID)
summary(tidyData)
head(tidyData)
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
dim(tidyData)
str(tidyData)
str(tidyData)
tidyData
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
?write
?write.table
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
setwd("~/R_Docs/CleaningDataProject/CleaningDataProj")
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
fileurl <- "./tidydata.txt"
finalSet <- read.table(fileurl)
finalSet
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
str(tidyData.txt)
str(tidyData)
head(tidyData,12)
library(tidyr)
res <- gather(tidyData,feature_tested,mean,-c(Subject,Activity))
res
tidyData[,Subject==1]
res[,Subject==1]
res[,res$Subject==1]
str(res)
res[,Subject==1]
res[,Subject==6]
summary(res)
class(res)
res[1,1]
res[Subject==1]
res[res$Subject==1]
res[res$Subject==1,]
source('~/R_Docs/CleaningDataProject/CleaningDataProj/run_analysis.r')
str(tidyData)
